{"version":3,"sources":["src/CompletionTrigger.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAEb;;;;;;GAMG;AACH;IAEE;;;;;OAKG;IACH,YACY,UAAU,IAAI,EACd,iBAAiB,8BAA8B;QAD/C,YAAO,GAAP,OAAO,CAAO;QACd,mBAAc,GAAd,cAAc,CAAiC;IACxD,CAAC;CAWL;AAtBD,8CAsBC;AAED;;;;;;GAMG;AACH,WAAmB,SAAQ,iBAAiB;IAE1C;;;;OAIG;IACH,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO;gBACzB,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAhBD,sBAgBC;AAED;;;;;;GAMG;AACH,WAAmB,SAAQ,iBAAiB;IAE1C;;;;;;;OAOG;IACH,YAAsB,KAAa,EAAY,WAAoB,EAAE,OAAgB;QACnF,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,UAAK,GAAL,KAAK,CAAQ;QAAY,gBAAW,GAAX,WAAW,CAAS;IAEnE,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,kBAAkB,IAAI,CAAC,WAAW,IAAI,GAAG,MAAM,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;qBAEG,QAAQ,sBAAsB,IAAI,CAAC,KAAK;qCACxB,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA1BD,sBA0BC;AAED;;;;;;GAMG;AACH,cAAsB,SAAQ,iBAAiB;IAE7C;;;;;;OAMG;IACH,YAAsB,YAAqB,EAAE,OAAgB;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,iBAAY,GAAZ,YAAY,CAAS;IAE3C,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,IAAI,WAAW,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;YAEN,MAAM;qCACmB,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AAzBD,4BAyBC;AAED;;;;;;GAMG;AACH,aAAqB,SAAQ,iBAAiB;IAE5C;;;;;OAKG;IACH,YAAsB,WAAmB,EAAE,OAAgB;QACzD,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,gBAAW,GAAX,WAAW,CAAQ;IAEzC,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;;;0EAIwD,IAAI,CAAC,WAAW;;;;;;qCAMrD,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA9BD,0BA8BC;AAED;;;;;;GAMG;AACH,cAAsB,SAAQ,iBAAiB;IAE7C;;;;;;OAMG;IACH,YAAsB,YAAqB,EAAE,OAAgB;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADK,iBAAY,GAAZ,YAAY,CAAS;IAE3C,CAAC;IAEY,IAAI,CAAC,MAAW;;YAC3B,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,CAAC;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,IAAI,aAAa,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACtB,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE;;2CAEyB,OAAO;;;qCAGb,IAAI,CAAC,cAAc,OAAO,IAAI,CAAC,OAAO;WAChE;aACN,CAAC,CAAC;QACL,CAAC;KAAA;CACF;AA3BD,4BA2BC","file":"CompletionTrigger.js","sourcesContent":["'use strict';\n\n/**\n * Defines a trigger that signifies page render completion.\n *\n * @export\n * @abstract\n * @class CompletionTrigger\n */\nexport abstract class CompletionTrigger {\n\n  /**\n   * Creates an instance of CompletionTrigger.\n   * @param {number} [timeout=1000] milliseconds until timing out.\n   * @param {string} [timeoutMessage='CompletionTrigger timed out.'] The timeout message.\n   * @memberof CompletionTrigger\n   */\n  constructor(\n    protected timeout = 1000,\n    protected timeoutMessage = 'CompletionTrigger timed out.',\n  ) {}\n\n  /**\n   * Abstracts away the trigger logic.\n   *\n   * @abstract\n   * @param {*} client the Chrome connection information.\n   * @returns {Promise<any>} resolves if triggered, rejects on error or timeout.\n   * @memberof CompletionTrigger\n   */\n  public abstract async wait(client: any): Promise<any>;\n}\n\n/**\n * Waits for a specified amount of time.\n *\n * @export\n * @class Timer\n * @extends {CompletionTrigger}\n */\nexport class Timer extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Timer CompletionTrigger.\n   * @param {number} timeout ms to wait until timing out.\n   * @memberof Timer\n   */\n  constructor(timeout: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this.timeout);\n    });\n  }\n}\n\n/**\n * Waits for an Event to fire.\n *\n * @export\n * @class Event\n * @extends {CompletionTrigger}\n */\nexport class Event extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Event CompletionTrigger.\n   * @param {string} event the name of the event to listen for.\n   * @param {string} [cssSelector] the CSS selector of the element to listen on.\n   *  Defaults to body.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Event\n   */\n  constructor(protected event: string, protected cssSelector?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const selector = this.cssSelector ? `querySelector('${this.cssSelector}')` : 'body';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          document.${selector}.addEventListener('${this.event}', resolve, { once: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n}\n\n/**\n * Waits for a callback to be called.\n *\n * @export\n * @class Callback\n * @extends {CompletionTrigger}\n */\nexport class Callback extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Callback CompletionTrigger.\n   * @param {string} [callbackName] the name of the callback to listen for.\n   *  Defaults to htmlPdfCb.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Callback\n   */\n  constructor(protected callbackName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const cbName = this.callbackName || 'htmlPdfCb';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          ${cbName} = resolve;\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n}\n\n/**\n * Waits for a DOM element to appear.\n *\n * @export\n * @class Element\n * @extends {CompletionTrigger}\n */\nexport class Element extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Element CompletionTrigger.\n   * @param {string} cssSelector the element to listen for.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Element\n   */\n  constructor(protected cssSelector: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          new MutationObserver((mutations, observer) => {\n            mutations.forEach((mutation) => {\n              if ([...mutation.addedNodes].find((node) => node.matches('${this.cssSelector}'))) {\n                observer.disconnect();\n                resolve();\n              }\n            });\n          }).observe(document.body, { childList: true });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n}\n\n/**\n * Waits for a variable to be true.\n *\n * @export\n * @class Variable\n * @extends {CompletionTrigger}\n */\nexport class Variable extends CompletionTrigger {\n\n  /**\n   * Creates an instance of the Variable CompletionTrigger.\n   * @param {string} [variableName] the variable to listen on.\n   *  Defaults to htmlPdfDone.\n   * @param {number} [timeout] ms to wait until timing out.\n   * @memberof Variable\n   */\n  constructor(protected variableName?: string, timeout?: number) {\n    super(timeout);\n  }\n\n  public async wait(client: any): Promise<any> {\n    const {Runtime} = client;\n    const varName = this.variableName || 'htmlPdfDone';\n    return Runtime.evaluate({\n      awaitPromise: true,\n      expression: `\n        new Promise((resolve, reject) => {\n          Object.defineProperty(window, '${varName}', {\n            set: (val) => { if (val === true) resolve(); }\n          });\n          setTimeout(() => reject('${this.timeoutMessage}'), ${this.timeout});\n        })`,\n    });\n  }\n}\n"],"sourceRoot":"../.."}